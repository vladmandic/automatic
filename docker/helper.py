import argparse
import subprocess
import os

class MultilineHelpFormatter(argparse.HelpFormatter):
    def __init__(self, prog):
        super().__init__("", 2, 55, 200)
    def _split_lines(self, text, _):
        lines = text.splitlines()
        lines.append("")
        return lines

class VolumeAction(argparse.Action):
    def __call__(self, namespace, values):
        dictionary = getattr(namespace, self.dest)
        
        if ":" in values:
            key, value = values.split(':', 1)
            if value:
                dictionary[key] = value
            elif key in dictionary:
                del dictionary[key]
        else:
            print(f"Invalid item '{values}'. Items must be in the format 'VOL_NAME:VOL_PATH'")

argParser = argparse.ArgumentParser(conflict_handler='resolve', add_help=True, formatter_class=MultilineHelpFormatter)

argParser.add_argument('-n', '--name', type=str, default = os.environ.get("SD_CONTAINER_NAME","SD-Next"), help = '''\
The name for the container
Default: SD-Next
''')
argParser.add_argument('-p', '--port', type=int, default = os.environ.get("SD_PORT",7860), help = '''\
Port exposed by the container
Default: 7860
''')
argParser.add_argument('--compute', type=str, choices=['cuda', 'rocm', 'cpu'], default = os.environ.get("SD_CONTAINER_COMPUTE","cuda"), help = '''\
Specify the compute platform use by the container
Default: cuda
''')
argParser.add_argument('-v', '--volumes', action=VolumeAction, default={
    "SD-Next": "/workspace",
    "Cache": "/root/.cache",
    "Python": "/python"
}, metavar='VOL_NAME:VOL_PATH', help='''\
Mount a volume to the container
This flag can be used multiple times for multiple volumes mount
If you want to remove default volume, type "VOL_NAME:" (example - "-v SD-Next:")
Every volume will be prefixed with "SD-Next_" unless the volume is named "SD-Next"
Default:
    SD-Next:/workspace (save entire SD Next to volume)
    Python:/python (save the venv to volume - venv will be created at /python/venv)
    Cache:/root/.cache (save the cache generated by pip, uv, huggingface)
'''
)
argParser.add_argument('--no-volume', default = os.environ.get("SD_CONTAINER_NO_VOL",False), action='store_true', help = '''\
Disable volume mounting (including default volume)
Default: False
''')

def cmdStream(cmd):
    wd = os.path.dirname(os.path.abspath(__file__))
    print(f"Running - {cmd}\n")
    process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True, bufsize=1, cwd=wd)
    for line in iter(process.stdout.readline, ''):
        print(line, end='')
    print("\n")